"""
Nix
Copyright (C) 2017  Mark Biciunas

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import argparse
import logging

from command_line_config.cli_script_list import CLIScriptList
from command_line_config.cli_script_create import CLIScriptCreate
from command_line_config.cli_script_update import CLIScriptUpdate
from command_line_config.cli_script_delete import CLIScriptDelete
from command_line_config.cli_script_rename import CLIScriptRename
from command_line_config.cli_script_run import CLIScriptRun
from command_line_config.cli_script_show import CLIScriptShow
from command_line_config.cli_script_tag_add import CLIScriptTagAdd
from command_line_config.cli_script_tag_remove import CLIScriptTagRemove
from command_line_config.cli_script_tag_list import CLIScriptTagList
from command_line_config.cli_tag_create import CLITagCreate
from command_line_config.cli_tag_delete import CLITagDelete
from command_line_config.cli_tag_rename import CLITagRename
from command_line_config.cli_tag_list import CLITagList
from command_line_config.cli_tag_show import CLITagShow

LOG = logging.getLogger(__name__)


class CLI(object):
    """Object which defines the command line interface for the nixconf program.
    """

    def __init__(self):
        """
        """
        LOG.debug("Create instance of {}".format(self.__class__.__name__))

        self._parser = self._make_parser()

    @staticmethod
    def _make_parser() -> argparse.ArgumentParser:
        """Set up the command line parser.
        :return: Argument parser object
        :rtype: argparse.ArgumentParser
        """
        LOG.debug("Call parser")

        _parser = argparse.ArgumentParser(description="Configure config file metadata.")

        _subparser = _parser.add_subparsers(title='subcommands')

        CLIScriptCreate(_subparser)

        CLIScriptUpdate(_subparser)

        CLIScriptDelete(_subparser)

        CLIScriptRename(_subparser)

        CLIScriptList(_subparser)

        CLIScriptRun(_subparser)

        CLIScriptShow(_subparser)

        CLIScriptTagAdd(_subparser)

        CLIScriptTagRemove(_subparser)

        CLIScriptTagList(_subparser)

        CLITagCreate(_subparser)

        CLITagDelete(_subparser)

        CLITagRename(_subparser)

        CLITagList(_subparser)

        CLITagShow(_subparser)

        return _parser

    def print_help(self):
        """Print out the help as generated by the parser.

        In general, this will only be called when a user executes the
        installer without
        providing any parameters.
        """
        self._parser.print_help()

    def start_parser(self):
        """Start the argument parser and process any command line
        parameters present.
        """
        args = self._parser.parse_args()

        args.func(args)
